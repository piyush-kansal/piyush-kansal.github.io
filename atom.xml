<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Piyush's Blog]]></title>
  <link href="http://piyush-kansal.github.io/atom.xml" rel="self"/>
  <link href="http://piyush-kansal.github.io/"/>
  <updated>2014-08-03T23:27:03-07:00</updated>
  <id>http://piyush-kansal.github.io/</id>
  <author>
    <name><![CDATA[Piyush Kansal]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What's New in C++11]]></title>
    <link href="http://piyush-kansal.github.io/blog/2014/07/30/whats-new-in-c-plus-plus-11/"/>
    <updated>2014-07-30T18:47:52-07:00</updated>
    <id>http://piyush-kansal.github.io/blog/2014/07/30/whats-new-in-c-plus-plus-11</id>
    <content type="html"><![CDATA[<p>I heard a lot of cool things about the new features and here is what I came across so far:</p>

<h2>New Keywords</h2>

<ul>
<li><h4>&ldquo;long long&rdquo;</h4>

<p> C++11 defines a new integer type &ldquo;long long&rdquo;, which is guaranteed to be at least 64 bits in length. The largest integer type &ldquo;long&rdquo; defined in C++03 is platform specific, so can be 32 or 64 bits in length. Just a heads up, C99 and other compliers already supported it even before C++11.</p></li>
<li><h4>&ldquo;auto&rdquo;</h4>

<p>Automatic type inteference has been introduced using &ldquo;auto&rdquo; keyword.</p></li>
</ul>


<figure class='code'><figcaption><span>Previously in C++03 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>  <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">b</span> <span class="o">=</span> <span class="mf">20.5</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>  <span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;test&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>  <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">itr</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">itr</span> <span class="o">!=</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">itr</span><span class="o">++</span><span class="p">)</span> <span class="p">{...}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>New in C++11 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>  <span class="k">auto</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>                 <span class="c1">// a is infered to be of type int</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">b</span> <span class="o">=</span> <span class="mf">20.5</span><span class="p">;</span>              <span class="c1">// b is infered to be of type float</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>                   <span class="c1">// c is infered to be of type int</span>
</span><span class='line'>  <span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;test&quot;</span><span class="p">;</span>           <span class="c1">// s is infered to be of type const char *</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>  <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="k">auto</span> <span class="n">d</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>               <span class="c1">// d is infered to be of type int</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">itr</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">itr</span> <span class="o">!=</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">itr</span><span class="o">++</span><span class="p">)</span> <span class="p">{...}</span>    <span class="c1">// itr is infered to be of type vector&lt;int&gt;::iterator</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="nl">itr:</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">itr</span><span class="p">;}</span>                              <span class="c1">// Another easier way to do the same, called range-based </span>
</span><span class='line'>                                                                <span class="c1">// for statement. itr is read only here</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span><span class="o">&amp;</span> <span class="nl">itr:</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">++</span><span class="n">itr</span><span class="p">;}</span>                           <span class="c1">// Another easier way to do the same, called range-based </span>
</span><span class='line'>                                                                <span class="c1">// for statement. itr is writable here</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h4>&ldquo;decltype&rdquo;</h4>

<p>To know the type of an expression at the compile time. For eg,</p></li>
</ul>


<figure class='code'><figcaption><span>New in C++11 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>  <span class="n">decltype</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="n">a2</span><span class="p">;</span>              <span class="c1">// a2&#39;s type is int since a is of type int (above)</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">int</span><span class="o">&amp;&amp;</span> <span class="n">fun</span><span class="p">();</span>
</span><span class='line'>  <span class="n">decltype</span><span class="p">(</span><span class="n">fun</span><span class="p">())</span> <span class="n">e</span><span class="p">;</span>           <span class="c1">// e&#39;s type is const int&amp;&amp;</span>
</span><span class='line'>  <span class="n">decltype</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="n">b2</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">;</span>        <span class="c1">// b2&#39;s type is float since b is of type float (above)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h4>&ldquo;nullptr&rdquo;</h4>

<p>No more initializing pointers with NULL which can both act as an int or int * leading to oddity.</p></li>
</ul>


<figure class='code'><figcaption><span>New in C++11 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">f</span> <span class="o">=</span> <span class="n">nullptr</span><span class="p">;</span>
</span><span class='line'>  <span class="k">auto</span> <span class="n">g</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h4>&ldquo;enum class&rdquo;</h4>

<p>enums have got an upgrade too and now they are type safe</p></li>
</ul>


<figure class='code'><figcaption><span>Previously in C++03 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>  <span class="k">enum</span> <span class="n">SPORTS</span> <span class="p">{</span><span class="n">BADMINTON</span><span class="p">,</span> <span class="n">TENNIS</span><span class="p">};</span>
</span><span class='line'>  <span class="k">enum</span> <span class="n">PERSON</span> <span class="p">{</span><span class="n">EMILY</span><span class="p">,</span> <span class="n">BOB</span><span class="p">};</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">BADMINTON</span> <span class="o">==</span> <span class="n">EMILY</span><span class="p">)</span> <span class="p">{}</span>   <span class="c1">// if condition will evaluate to true</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>New in C++11 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>  <span class="k">enum</span> <span class="k">class</span> <span class="nc">SPORTS</span> <span class="p">{</span><span class="n">BADMINTON</span><span class="p">,</span> <span class="n">TENNIS</span><span class="p">};</span>
</span><span class='line'>  <span class="k">enum</span> <span class="k">class</span> <span class="nc">PERSON</span> <span class="p">{</span><span class="n">EMILY</span><span class="p">,</span> <span class="n">BOB</span><span class="p">};</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">SPORT</span><span class="o">::</span><span class="n">BADMINTON</span> <span class="o">==</span> <span class="n">PERSON</span><span class="o">::</span><span class="n">EMILY</span><span class="p">)</span> <span class="p">{}</span>   <span class="c1">// if condition will evaluate to false</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h4>&ldquo;static_assert&rdquo;</h4>

<p>C++11 defines a new compile time assert.</p></li>
</ul>


<figure class='code'><figcaption><span>New in C++11 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>  <span class="n">static_assert</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">==</span> <span class="mi">4</span><span class="p">,</span> <span class="s">&quot;This program cannot be run on machines not supporting integer to be 4 bytes long&quot;</span><span class="p">);</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inspiring Quotations and My Favorites]]></title>
    <link href="http://piyush-kansal.github.io/blog/2014/04/11/inspiring-quotations-and-my-favorites/"/>
    <updated>2014-04-11T22:31:14-07:00</updated>
    <id>http://piyush-kansal.github.io/blog/2014/04/11/inspiring-quotations-and-my-favorites</id>
    <content type="html"><![CDATA[<blockquote><p>A foolish consistency is the hobgoblin of little minds, adored by little statesmen and philosophers and divines.</p><footer><strong>Ralph Waldo Emerson</strong></footer></blockquote>




<blockquote><p>To think, you have to write. If you&#8217;re thinking without writing, you only think you&#8217;re thinking.</p><footer><strong>Leslie Lamport</strong></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fractals in GoLang]]></title>
    <link href="http://piyush-kansal.github.io/blog/2014/04/09/fractals-in-golang/"/>
    <updated>2014-04-09T23:16:18-07:00</updated>
    <id>http://piyush-kansal.github.io/blog/2014/04/09/fractals-in-golang</id>
    <content type="html"><![CDATA[<p>I wanted to explore <a href="http://en.wikipedia.org/wiki/Fractal">Fractals</a> ever since my friend <a href="https://github.com/avijitgupta">Avijit</a> told me about them. I found them fascinating. Just one equation and you can do wonders with it. It is more fascinating to know how nature uses recursion/fractals in things like trees, leaves, corals and even broccoli !! Here are some interesting fractals I generated using <a href="http://en.wikipedia.org/wiki/Mandelbrot_set">Mandelbrot Set</a>:</p>

<p><img src="https://raw.githubusercontent.com/piyush-kansal/fractals-in-go/master/output/fractal_1000.000000_0.000000_0.000000.png" title="'zoom=1000, real=0, imag=0'" ></p>

<p><img src="https://raw.githubusercontent.com/piyush-kansal/fractals-in-go/master/output/fractal_100000.000000_-0.710000_-0.250000.png" title="'zoom=100000, real=-0.71, imag=-0.25'" ></p>

<p><img src="https://raw.githubusercontent.com/piyush-kansal/fractals-in-go/master/output/spiral_10000_0.040000_0.999900.png" title="'iter=10000, degree=0.04, factor=0.9999'" ></p>

<p>Here is the <a href="https://github.com/piyush-kansal/fractals-in-go">implementation</a>.</p>
]]></content>
  </entry>
  
</feed>
