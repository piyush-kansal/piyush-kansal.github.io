<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++11 | Piyush's Blog]]></title>
  <link href="http://piyush-kansal.github.io/blog/categories/c-plus-plus-11/atom.xml" rel="self"/>
  <link href="http://piyush-kansal.github.io/"/>
  <updated>2014-08-03T19:21:50-07:00</updated>
  <id>http://piyush-kansal.github.io/</id>
  <author>
    <name><![CDATA[Piyush Kansal]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What's New in C++11]]></title>
    <link href="http://piyush-kansal.github.io/blog/2014/07/30/whats-new-in-c-plus-plus-11/"/>
    <updated>2014-07-30T18:47:52-07:00</updated>
    <id>http://piyush-kansal.github.io/blog/2014/07/30/whats-new-in-c-plus-plus-11</id>
    <content type="html"><![CDATA[<p>I heard a lot of cool things about the new features and here is what I came across so far:</p>

<h2>New Keywords</h2>

<ul>
<li><h4>&ldquo;long long&rdquo;</h4>

<p> C++11 defines a new integer type &ldquo;long long&rdquo;, which is guaranteed to be at least 64 bits in length. The largest integer type &ldquo;long&rdquo; defined in C++03 is platform specific, so can be 32 or 64 bits in length. Just a heads up, C99 and other compliers already supported it even before C++11.</p></li>
<li><h4>&ldquo;auto&rdquo;</h4>

<p>Automatic type inteference has been introduced using &ldquo;auto&rdquo; keyword.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Previously in C++03 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="kt">float</span> <span class="n">b</span> <span class="o">=</span> <span class="mf">20.5</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">test</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span>
</span><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">itr</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">itr</span> <span class="o">!=</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">itr</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>New in C++11 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">auto</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>                 <span class="c1">// a is infered to be of type int</span>
</span><span class='line'><span class="kt">float</span> <span class="n">b</span> <span class="o">=</span> <span class="mf">20.5</span><span class="p">;</span>              <span class="c1">// b is infered to be of type float</span>
</span><span class='line'><span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>                   <span class="c1">// c is infered to be of type int</span>
</span><span class='line'><span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">test</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span>           <span class="c1">// s is infered to be of type const char *</span>
</span><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="k">auto</span> <span class="n">d</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>               <span class="c1">// d is infered to be of type int</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">itr</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">itr</span> <span class="o">!=</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">itr</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;}</span>   <span class="c1">// itr is infered to be of type vector&lt;int&gt;::iterator</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><h4>&ldquo;decltype&rdquo;</h4>

<p>To know the type of an expression at the compile time. For eg,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>New in C++11 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">decltype</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="n">a2</span><span class="p">;</span>              <span class="c1">// a2&amp;rsquo;s type is int since a is of type int (above)</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">fun</span><span class="p">();</span>
</span><span class='line'><span class="n">decltype</span><span class="p">(</span><span class="n">fun</span><span class="p">())</span> <span class="n">e</span><span class="p">;</span>           <span class="c1">// e&amp;rsquo;s type is const int&amp;amp;&amp;amp;</span>
</span><span class='line'><span class="n">decltype</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="n">b2</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">;</span>        <span class="c1">// b2&amp;rsquo;s type is float since b is of type float (above)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><h4>&ldquo;nullptr&rdquo;</h4>

<p>No more initializing pointers with NULL which can both act as an int or int * leading to oddity.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>New in C++11 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="o">*</span><span class="n">f</span> <span class="o">=</span> <span class="n">nullptr</span><span class="p">;</span>
</span><span class='line'><span class="k">auto</span> <span class="n">g</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><h4>&ldquo;enum class&rdquo;</h4>

<p>enums have got an upgrade too and now they are type safe</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Previously in C++03 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">enum</span> <span class="n">SPORTS</span> <span class="p">{</span><span class="n">BADMINTON</span><span class="p">,</span> <span class="n">TENNIS</span><span class="p">};</span>
</span><span class='line'><span class="k">enum</span> <span class="n">PERSON</span> <span class="p">{</span><span class="n">EMILY</span><span class="p">,</span> <span class="n">BOB</span><span class="p">};</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">BADMINTON</span> <span class="o">==</span> <span class="n">EMILY</span><span class="p">)</span> <span class="p">{}</span>   <span class="c1">// if condition will evaluate to true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>New in C++11 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">enum</span> <span class="k">class</span> <span class="nc">SPORTS</span> <span class="p">{</span><span class="n">BADMINTON</span><span class="p">,</span> <span class="n">TENNIS</span><span class="p">};</span>
</span><span class='line'><span class="k">enum</span> <span class="k">class</span> <span class="nc">PERSON</span> <span class="p">{</span><span class="n">EMILY</span><span class="p">,</span> <span class="n">BOB</span><span class="p">};</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">SPORT</span><span class="o">::</span><span class="n">BADMINTON</span> <span class="o">==</span> <span class="n">PERSON</span><span class="o">::</span><span class="n">EMILY</span><span class="p">)</span> <span class="p">{}</span>   <span class="c1">// if condition will evaluate to false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
